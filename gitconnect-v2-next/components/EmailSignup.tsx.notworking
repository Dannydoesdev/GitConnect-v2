import React, { useCallback } from "react"
import { useRouter } from "next/router"
import { createUserWithEmailAndPassword, EmailAuthProvider, signInWithPopup, isSignInWithEmailLink, signInWithEmailLink, EmailAuthCredential } from "firebase/auth"
import { auth } from "../firebase/clientApp"
import * as firebaseui from 'firebaseui'
import 'firebaseui/dist/firebaseui.css'
import {  } from 'firebaseui'

//testing with firebaseUI drop in components




const EmailSignupUi = () => {
  const Router = useRouter()

  // Initialize the FirebaseUI Widget using Firebase.
  const ui = new firebaseui.auth.AuthUI(auth);
  const emailProvider =  new EmailAuthProvider()

  ui.start('#firebaseui-auth-container', {
    signInOptions: [
    //  EmailAuthCredential
    ],
    // Other config options...
  });

  // const emailProvider =  new EmailAuthProvider()
  const uiConfig = {
    signInSuccessUrl: '<url-to-redirect-to-on-success>',
    signInOptions: [
      // Leave the lines as is for the providers you want to offer your users.
     
      auth,
      
    
    ],
    // tosUrl and privacyPolicyUrl accept either url string or a callback
    // function.
    // Terms of service url/callback.
    tosUrl: '<your-tos-url>',
    // Privacy policy url/callback.
    privacyPolicyUrl: function() {
      window.location.assign('<your-privacy-policy-url>');
    }
  };


  // createUserWithEmailAndPassword(auth, email, password)
  // .then((userCredential) => {
  //   // Signed in 
  //   const user = userCredential.user;
  //   // ...
  // })
  // .catch((error) => {
  //   const errorCode = error.code;
  //   const errorMessage = error.message;
  //   // ..
  // });
  
  // Don't re-render the Github provider until the router changes (eg user is pushed home)
  const loginHandler = useCallback(async () => {
    const provider = new EmailAuthProvider()
    // additional scopes to add?



    try {
      // Attempt popup OAuth
      await signInWithPopup(auth, provider)
      
      // push to home after auth
      Router.push("/")
    } catch (error) {
      console.log("error")
      alert(error)
    }
  }, [Router])
  return (
    <button
      className="p-3 shadow-lg rounded-lg border-2 flex cursor-pointer bg-black text-white hover:bg-gray-600 hover:shadow-2xl transition-all duration-500"
      onClick={loginHandler}
    >
      <div className="flex items-center">
        <img
          className="w-8 h-8 bg-white rounded-full  "
          src="https://www.freepnglogos.com/uploads/512x512-logo-png/512x512-logo-github-icon-35.png"
          alt="github"
          width="200"
          height="200"
        />
        <h3 className="ml-4 text-lg font-semibold  my-auto ">
          Continue with Email
        </h3>
      </div>
    </button>
  )
}

export default EmailSignupUi
